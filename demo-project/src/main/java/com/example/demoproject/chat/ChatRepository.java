package com.example.demoproject.chat;

import com.example.demoproject.db.tables.pojos.Chatmessage;
import com.example.demoproject.db.tables.pojos.Chatroom;
import com.example.demoproject.db.tables.records.ChatroomRecord;
import io.vavr.collection.Seq;
import io.vavr.collection.Vector;
import org.jooq.Configuration;
import org.jooq.impl.DSL;

import java.time.LocalDateTime;
import java.util.Optional;

import static com.example.demoproject.db.tables.Chatroom.CHATROOM;
import static com.example.demoproject.db.tables.Chatmessage.CHATMESSAGE;

public interface ChatRepository {
    /**
     * Lists all objects currently stored in the repository.
     *
     * Note that the return type is an (immutable) vavr list, of (immutable) FlywayTest data objects, so the result is guaranteed
     * to be complete and in memory.
     */
    public Seq<Chatmessage> getMessagesByChatroom(Chatroom chatroom);

    /**
     * Creates a new ChatRoom object and stores it in the repository.
     *
     * The ID field of the object is ignored.
     *
     * @return a new ChatRoom with its ID set to the ID that was generated by the repository.
     */
    public Chatroom createChatroom(Chatroom chatroom);

    /**
     * Finds a chatroom by its name
     *
     * @return a An Optional with a chatroom if one exists with the specified name
     */
    public Optional<Chatroom> findChatroomByName(String name);

    /**
     * Creates a new ChatMessage object in the chatroom
     *
     * @param chatroom the chatroom where to post the message
     * @return a new Chatmessage with an Id generated by the database an a timestamp of now
     * @throws IllegalArgumentException if chatroom is not found
     */
    public Chatmessage postMessageToChatroom(Chatroom chatroom, String message);

    /**
     * Gets all chatrooms
     *
     * @return an immutable list of chatrooms
     */
    public Seq<Chatroom> getChatrooms();


    public static class Live {
        public static ChatRepository apply(Configuration cfg) {
            final var ctx = DSL.using(cfg);

            return new ChatRepository() {

                @Override
                public Seq<Chatmessage> getMessagesByChatroom(Chatroom chatroom) {
                    return Vector.ofAll(
                            ctx.selectFrom(CHATMESSAGE)
                                    .where(CHATMESSAGE.CHATROOM_ID.eq(chatroom.getId()))
                                    .orderBy(CHATMESSAGE.TIMESTAMP)
                                    .fetchInto(Chatmessage.class)
                    );
                }

                @Override
                public Chatroom createChatroom(Chatroom chatroom) {
                    var rec = ctx.newRecord(CHATROOM, chatroom);

                    // In case somebody sneaked in an "id", let's get rid of it here (the DB creates ids for objects)
                    rec.reset(CHATROOM.ID);

                    // Calling "store()" will insert the record, and update it with the ID that came from the database
                    rec.store();

                    // We'll return a new immutable POJO, that's now updated with the ID.
                    return rec.into(Chatroom.class);
                }

                @Override
                public Optional<Chatroom> findChatroomByName(String name) {
                    ChatroomRecord chatroomRecord = ctx.fetchOne(CHATROOM, CHATROOM.NAME.eq(name));
                    if (chatroomRecord==null) {
                        return Optional.empty();
                    } else {
                        return Optional.of(chatroomRecord.into(Chatroom.class));
                    }
                }

                @Override
                public Chatmessage postMessageToChatroom(Chatroom chatroom, String message) {
                    //ensure that chatroom exists
                    chatroom = getChatRoom(chatroom.getId());

                    Chatmessage chatmessage = new Chatmessage(null, message, chatroom.getId(), LocalDateTime.now());

                    var rec = ctx.newRecord(CHATMESSAGE, chatmessage);

                    rec.store();

                    // We'll return a new immutable POJO, that's now updated with the ID.
                    return rec.into(Chatmessage.class);
                }

                @Override
                public Seq<Chatroom> getChatrooms() {
                    return Vector.ofAll(
                            ctx.selectFrom(CHATROOM).fetchInto(Chatroom.class)
                    );
                }

                /**
                 * Returns a chatroom with given id
                 *
                 * @param id chat room id
                 * @return a Chatroom if one with id exists
                 */
                private Chatroom getChatRoom(Integer id) {
                    return ctx.fetchOne(CHATROOM, CHATROOM.ID.eq(id)).into(Chatroom.class);
                }
            };
        }
    }
}
