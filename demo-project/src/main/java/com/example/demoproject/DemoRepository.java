package com.example.demoproject;

import static com.example.demoproject.db.tables.FlywayTest.FLYWAY_TEST;

import com.example.demoproject.db.tables.pojos.FlywayTest;

import org.jooq.Configuration;
import org.jooq.impl.DSL;

import io.vavr.collection.Seq;
import io.vavr.collection.Vector;

public interface DemoRepository {
    /**
     * Lists all objects currently stored in the repository.
     *
     * Note that the return type is an (immutable) vavr list, of (immutable) FlywayTest data objects, so the result is guaranteed
     * to be complete and in memory.
     */
    public Seq<FlywayTest> list();

    /**
     * Creates a new object and stores it in the repository.
     *
     * The ID field of the object is ignored.
     *
     * @return a new FlywayTest with its ID set to the ID that was generated by the repository.
     */
    public FlywayTest create(FlywayTest flywaytest);

    /**
     * Updates an existing object with new values.
     *
     * The ID field of the object must exist in the repository.
     */
    public void update(FlywayTest flywaytest);

    public static class Live {
        public static DemoRepository apply(Configuration cfg) {
            final var ctx = DSL.using(cfg);

            return new DemoRepository() {
                @Override
                public Seq<FlywayTest> list() {
                    return Vector.ofAll(
                        ctx.selectFrom(FLYWAY_TEST).orderBy(FLYWAY_TEST.ID).fetchInto(FlywayTest.class)
                    );
                }

                @Override
                public FlywayTest create(FlywayTest flywaytest) {
                    var rec = ctx.newRecord(FLYWAY_TEST, flywaytest);

                    // In case somebody sneaked in an "id", let's get rid of it here (the DB creates ids for objects)
                    rec.reset(FLYWAY_TEST.ID);

                    // Calling "store()" will insert the record, and update it with the ID that came from the database
                    rec.store();

                    // We'll return a new immutable POJO, that's now updated with the ID.
                    return rec.into(FlywayTest.class);
                }

                @Override
                public void update(FlywayTest flywaytest) {
                    // .update() will always issue an update, so postgres will auto-check that there's an ID.
                    ctx.newRecord(FLYWAY_TEST, flywaytest).update();
                }
            };
        }
    }
}
